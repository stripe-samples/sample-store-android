apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'checkstyle'
assemble.dependsOn('lint')
check.dependsOn('checkstyle')

configurations {
    ktlint
}

// Read values from gradle.properties or system environment variable
def getBackendUrl() {
    return readProperty('STRIPE_EXAMPLE_BACKEND_URL')
}

def getPublishableKey() {
    return readProperty('STRIPE_EXAMPLE_PUBLISHABLE_KEY')
}

def getAccountId() {
    return readProperty('STRIPE_ACCOUNT_ID')
}

private def readProperty(name) {
    final String propValue
    if (hasProperty(name)) {
        propValue = property(name)
    } else {
        propValue = System.getenv(name)
    }

    return propValue?.trim() ? propValue : ""
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.stripe.android.samplestore"
        minSdkVersion 21
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        manifestPlaceholders = [
                BACKEND_URL: getBackendUrl(),
                PUBLISHABLE_KEY: getPublishableKey(),
                STRIPE_ACCOUNT_ID: getAccountId()
        ]
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        enable "Interoperability"
        lintConfig file("../settings/lint.xml")
    }

    testOptions {
        unitTests {
            // Note: without this, all Robolectric tests using BuildConfig will fail.
            includeAndroidResources = true
        }
    }
}

androidExtensions {
    experimental = true
    features = ["parcelize"]
}

dependencies {
    implementation 'com.stripe:stripe-android:15.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.activity:activity-ktx:1.2.0-alpha06'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.google.android.gms:play-services-wallet:18.0.0'

    /* Used for server calls */
    implementation 'com.squareup.okio:okio:2.7.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    /* Used to make Retrofit easier and GSON & Rx-compatible*/
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // Used to debug your Retrofit connections
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"

    ktlint 'com.pinterest:ktlint:0.37.2'

    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'org.json:json:20200518'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
    testImplementation 'com.google.truth:truth:1.0.1'
}

repositories {
    mavenCentral()
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
